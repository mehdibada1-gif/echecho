rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(docId) {
      return request.auth.uid == docId;
    }

    function isResourceOwner(resource) {
        return request.auth.uid == resource.data.createdBy;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
    }

    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated() && isResourceOwner(request.resource);
      // Allow update if user is creator OR if they are only joining (updating participants array)
      allow update: if isAuthenticated() && (isResourceOwner(resource) || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']));
      allow delete: if isAuthenticated() && isResourceOwner(resource);
    }
    
    match /blogs/{blogId} {
      allow read: if true;
      allow create: if isAuthenticated() && isResourceOwner(request.resource);
      allow update, delete: if isAuthenticated() && isResourceOwner(resource);
    }
    
    match /organizations/{orgId} {
      allow read: if true;
      allow create, update: if isAuthenticated() && request.auth.uid == request.resource.data.ownerId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    match /chats/{chatId} {
      // Allow read/write if user is a participant
      allow read, create, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
         // Allow read if user is a participant of the chat
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        // Allow write if user is sender
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId;
      }
    }
    
     match /event_participants/{docId} {
        allow read, create: if isAuthenticated();
     }
  }
}